package BachelorArbeitWs1617;


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JSlider;
import javax.swing.JTextField;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import animal.gui.*;
import translator.AnimalTranslator;
import animal.main.Animation;
import animal.main.AnimationState;
import animal.main.AnimationWindow;
import animal.misc.MessageDisplay;

/**
 * @author guido
 *
 * To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Generation - Code and Comments
 */
public class MyAnimationControlToolBarController extends AnimationControlToolBarController{
    /**
     * The animal window instance of which we will be working!
     */
//  private AnimationControlToolBar animationControlToolBar;

    /**
     * The animal window instance of which we will be working!
     */
    private AnimationWindow animationWindow;

    /**
     * create the new animation control tool bar controller
     *
     * @param animWindow the current instance of the AnimationWindow
     * @param toolBar the AnimationControlToolBar on which this controller works
     */
    public MyAnimationControlToolBarController(AnimationWindow animWindow,
                                             MyAnimationControlToolBar toolBar) {
        super(animWindow,toolBar);

        // store the reference to the AnimationControlToolBar instance
//    animationControlToolBar = toolBar;

        // store the reference to the AnimationWindow instance
        animationWindow = animWindow;
    }


    /**
     * handles the events thrown from the animation control tool bar
     *
     * @param event the generated event
     */
    public void actionPerformed(ActionEvent event) {
        // make sure the Animal reference exists!
        if (animationWindow == null) {
            animationWindow = AnimalMainWindow.getWindowCoordinator().getAnimationWindow(false);
        }

        String command = event.getActionCommand();

        if (command.equals(MyAnimationControlToolBar.START)) {
            animationWindow.startOfAnimation();
        }
        else if (command.equals(MyAnimationControlToolBar.PREV)) {
            animationWindow.backwardAnimation();
        }
        else if (command.equals(MyAnimationControlToolBar.REVERSE_SLIDE_SHOW)) {
            animationWindow.reverseSlideShow();
        }
        else if (command.equals(MyAnimationControlToolBar.REVERSE_PLAY)) {
            animationWindow.reversePlay();
        }
        else if (command.equals(MyAnimationControlToolBar.PAUSE)) {
            animationWindow.pauseAnimation();
        }
        else if (command.equals(MyAnimationControlToolBar.PLAY)) {
            animationWindow.playAnimation();
        }
        else if (command.equals(MyAnimationControlToolBar.SLIDE_SHOW)) {
            animationWindow.slideShow();
        }
        else if (command.equals(MyAnimationControlToolBar.NEXT_BUTTON)) {
            animationWindow.forwardAnimation();
        }
        else if (command.equals(MyAnimationControlToolBar.END)) {
            animationWindow.endOfAnimation();
        }
        else if (command.equals(MyAnimationControlToolBar.STEP_NR_FIELD)) {
            JTextField source = (JTextField) event.getSource();
            String targetStepString = source.getText();
            int targetStep = 0;
            int currentStep = animationWindow.getStep();

            try {
                // try to determine the value entered by the user...
                targetStep = Integer.parseInt(targetStepString);

                // check if this is a legal value before assigning it!
                if (!animationWindow.getAnimationState().setStep(targetStep, false)) {
                    throw new NumberFormatException(
                            AnimalTranslator.translateMessage("illegalStepNumber",
                                    Integer.valueOf(targetStep)));
                }

                // changed this to ", true" to prevent animators from being executed!
                animationWindow.setStep(targetStep, true);
            }
            catch (NumberFormatException exc) {
                animationWindow.setStep(currentStep, true); // also was "false"
            }
        }
        else
            MessageDisplay.errorMsg("nothingAssoc", command, MessageDisplay.RUN_ERROR);
    }


    /**
     * processes events generated by the "change animation percentage" slider
     *
     * @param event the ChangeEvent to be handled
     */
    public void stateChanged(ChangeEvent event) {
        // retrieve the base object

        Object source = event.getSource();

        if (source instanceof JSlider) {
            // the base object is the "animation %" slider
            JSlider targetSlider = (JSlider) source;

            // retrieve the current animation state from the AnimationWindow
            AnimationState animationState = animationWindow.getAnimationState();

            // retrieve the current animation from the AnimationWindow
            Animation anim = animationState.getAnimation();

            // calculate the new step based on the number of steps
            // and the target percentage
            int targetStep = Math.round(((anim.getNrOfSteps() - 1)
                    * targetSlider.getValue()) / 100);

            // set the target step for the AnimationControlToolBar
            //animationControlToolBar.setStep(targetStep, animationState);
            // used to be
            animationWindow.setStep(targetStep, true);
        }
    }
}
